{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudTrail API Activity Alarm for CloudWatch Logs",
  "Parameters" : {
      "LogGroupName" : {
          "Type" : "String",
          "Default" : "aws-controltower/CloudTrailLogs",
          "Description" : "Enter CloudWatch Logs log group name."
      },
      "SNSLocalTopic" : {
          "Type" : "String",
          "Default" : "tpc_cloudtrail-prod",
          "Description" : "SNS Topic to be created in the local account."
      },
      "SNSRemoteTopicARN" : {
          "Type" : "String",
          "Default" : "arn:aws:sns:us-east-1:321031481416:tpc_infrasec-prod",
          "Description" : "SNS Topic ARN where alerts will be consolidated."
      }
  },
  "Resources" : {
      # ------------------------------------------------------------------------------------------------------------------------------------
      # Local SNS Topic and Lambda (forwarder) subscription
      # ------------------------------------------------------------------------------------------------------------------------------------
      "SNSTopicARN": {
          "Type" : "AWS::SNS::Topic",
          "Properties" : {
            "TopicName" : { "Ref" : "SNSLocalTopic" }
          }
      },
      "SNSTopicSubscription": {
          "Type" : "AWS::SNS::Subscription",
          "Properties" : {
            "Endpoint" : {"Fn::GetAtt": ["LambdaForwarder","Arn"]},
            "Protocol" : "lambda",
            "TopicArn" : { "Ref" : "SNSTopicARN" }
          }
      },

      # ------------------------------------------------------------------------------------------------------------------------------------
      # Lambda which forward alarms to central SNS Topic
      # ------------------------------------------------------------------------------------------------------------------------------------
      "LambdaForwarderPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": {"Fn::GetAtt": ["LambdaForwarder","Arn"]},
          "Action": "lambda:InvokeFunction",
          "Principal": "sns.amazonaws.com"
        }
      },
      "LambdaForwarderRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
            },
          "Path": "/",
          "Policies": [{
            "PolicyName": "PublishtoRemoteSNSTopic",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{ "Effect": "Allow", "Action": ["sns:publish"], "Resource": { "Ref" : "SNSRemoteTopicARN" } }]
              }
              }],
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ]
        }
      },
      "LambdaForwarder": {
        "Type" : "AWS::Lambda::Function",
        "Properties" : {
          "Code" : {
            "ZipFile":  { "Fn::Join": ["", [
              "from __future__ import print_function\n",
              "import boto3\n",
              "import json\n",
              "import os\n",
              "def lambda_handler(event, context):\n",
                " sns = boto3.client('sns')\n",
                " subject=event['Records'][0]['Sns']['Subject']\n",
                " if subject is None:\n",
                "   subject = 'None'\n",
                " message=event['Records'][0]['Sns']['Message']\n",
                " try:\n",
                "   msg = json.loads(message)\n",
                "   message = json.dumps(msg, indent=4)\n",
                "   if 'detail-type' in msg:\n",
                "     subject = msg['detail-type']\n",
                " except:\n",
                "   print('Not json')\n",
                " response = sns.publish(\n",
                "   TopicArn=os.environ.get('sns_arn'),\n",
                "   Subject=subject,\n",
                "   Message=message\n",
                " )\n",
                " print(response)\n",
                " return response\n"
          ]]}
        },
          "Description" : "Lambda to forward alerts to remote SNS Topic",
          "Environment" : {
            "Variables" : {
              "sns_arn" : { "Ref" : "SNSRemoteTopicARN" }
            }
          },
          "FunctionName" : "CloudTrailAlertsForwarder",
          "Handler" : "index.lambda_handler",
          "Role" : { "Fn::GetAtt" : ["LambdaForwarderRole", "Arn"] },
          "Runtime" : "python3.6",
          "Timeout" : 60
        }
      },

      # ------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 1.1   Avoid the use of the "root" account (Scored)
      # CIS AWS Foundations Benchmark - 3.3   Ensure a log metric filter and alarm exist for usage of "root" account  (Scored)
      # ------------------------------------------------------------------------------------------------------------------------------------
      "RootAccountUsageMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{$.userIdentity.type=\"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !=\"AwsServiceEvent\"}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "UsageRootAccount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "RootAccountUsageAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailRootAccountUsageAlarm",
              "AlarmDescription" : "Alarms when an root account is used.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "UsageRootAccount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # ------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.1   Ensure a log metric filter and alarm exist for unauthorized API calls (Scored)
      # ------------------------------------------------------------------------------------------------------------------------------------
      "AuthorizationFailuresMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "AuthorizationFailureCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "AuthorizationFailuresAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailAuthorizationFailures",
              "AlarmDescription" : "Alarms when an unauthorized API call is made.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "AuthorizationFailureCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"

          }
      },

      # ------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.2   Ensure a log metric filter and alarm exist for Management Console sign-in without MFA (Scored)
      # ------------------------------------------------------------------------------------------------------------------------------------
      "ConsoleSigninWithoutMFAMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventName=\"ConsoleLogin\") && ($.additionalEventData.MFAUsed !=\"Yes\")}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "ConsoleSigninWithoutMFA",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "ConsoleSigninWithoutMFAAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailConsoleSigninWithoutMFA",
              "AlarmDescription" : "Alarms when console signin exist without MFA.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "ConsoleSigninWithoutMFA",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # --------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.4 Ensure a log metric filter and alarm exist for IAM policy changes (Scored)
      # --------------------------------------------------------------------------------------------------------------------------------------------
      "IAMPolicyChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "IAMPolicyEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "IAMPolicyChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailIAMPolicyChanges",
              "AlarmDescription" : "Alarms when an API call is made to change an IAM policy.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "IAMPolicyEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # --------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes (Scored)
      # --------------------------------------------------------------------------------------------------------------------------------------------
      "CloudTrailChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "CloudTrailEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "CloudTrailChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "CloudTrailEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # --------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures (Scored)
      # --------------------------------------------------------------------------------------------------------------------------------------------
      "ConsoleSignInFailuresMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "ConsoleSignInFailureCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "ConsoleSignInFailuresAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailConsoleSignInFailures",
              "AlarmDescription" : "Alarms when an unauthenticated API call is made to sign into the console.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "ConsoleSignInFailureCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "3"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.7   Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "DisableOrDeleteCMKMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "DisableOrDeleteCMK",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "DisableOrDeleteCMKAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailDisableOrDeleteCMK",
              "AlarmDescription" : "Alarms when disabling or scheduled deletion of customer created CMKs.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "DisableOrDeleteCMK",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "S3BucketPolicyChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "S3BucketPolicyChanges",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "S3BucketPolicyChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailS3BucketPolicyChanges",
              "AlarmDescription" : "Alarms when an API call is made to change an S3 bucket policy.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "S3BucketPolicyChanges",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "AWSConfigChangessMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "AWSConfigChanges",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "AWSConfigChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailAWSConfigChanges",
              "AlarmDescription" : "Alarms when an API call is made to change an AWS Config service.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "AWSConfigChanges",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.10 Ensure a log metric filter and alarm exist for security group changes (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "SecurityGroupChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "SecurityGroupEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "SecurityGroupChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailSecurityGroupChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Security Group.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "SecurityGroupEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL) (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "NetworkAclChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "NetworkAclEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "NetworkAclChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailNetworkAclChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Network ACL.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "NetworkAclEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.12 Ensure a log metric filter and alarm exist for changes to network gateways (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "GatewayChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "GatewayEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "GatewayChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailGatewayChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "GatewayEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.13 Ensure a log metric filter and alarm exist for route table changes (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "RouteTableChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "RouteTableChanges",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "RouteTableChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailRouteTableChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Route Table.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "RouteTableChanges",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # CIS AWS Foundations Benchmark - 3.14 Ensure a log metric filter and alarm exist for VPC changes (Scored)
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "VpcChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "VpcEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "VpcChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailVpcChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "VpcEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      # Additional metrics and alarms for EC2 events
      # -------------------------------------------------------------------------------------------------------------------------------------------------------
      "EC2InstanceChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "EC2InstanceEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "EC2InstanceChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailEC2InstanceChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot an EC2 instance.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "EC2InstanceEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      },

      "EC2LargeInstanceChangesMetricFilter": {
          "Type": "AWS::Logs::MetricFilter",
          "Properties": {
              "LogGroupName": { "Ref" : "LogGroupName" },
              "FilterPattern": "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }",
              "MetricTransformations": [
                  {
                      "MetricNamespace": "CloudTrailMetrics",
                      "MetricName": "EC2LargeInstanceEventCount",
                      "MetricValue": "1"
                  }
              ]
          }
      },
      "EC2LargeInstanceChangesAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
              "AlarmName" : "CloudTrailEC2LargeInstanceChanges",
              "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.",
              "AlarmActions" : [{ "Ref" : "SNSTopicARN" }],
              "MetricName" : "EC2LargeInstanceEventCount",
              "Namespace" : "CloudTrailMetrics",
              "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods" : "1",
              "Period" : "300",
              "Statistic" : "Sum",
              "Threshold" : "1"
          }
      }
  }
}
